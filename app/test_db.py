#!/usr/bin/env python3
"""
Script de test de connexion √† la base de donn√©es
"""

import sys

from models.database_manager import DatabaseManager
from sqlalchemy import text


def test_database_connection():
    """Test complet de la connexion et exploration de la base"""
    print("üîß Test de connexion √† la base de donn√©es PostgreSQL")
    print("=" * 60)

    try:
        # Initialisation
        db = DatabaseManager()
        print("‚úÖ DatabaseManager initialis√©")

        # Test de connexion
        if db.test_connection():
            print("‚úÖ Connexion PostgreSQL r√©ussie!")

            # Informations de connexion
            info = db.get_connection_info()
            print(f"üìã Host: {info['host']}:{info['port']}")
            print(f"üìã Database: {info['database']}")
            print(f"üìã User: {info['username']}")
            print()

            # Exploration de la base
            with db.get_connection() as conn:
                # Sch√©mas
                result = conn.execute(
                    text(
                        """
                    SELECT schema_name 
                    FROM information_schema.schemata 
                    WHERE schema_name NOT IN (
                        'information_schema', 'pg_catalog', 'pg_toast'
                    )
                    ORDER BY schema_name
                """
                    )
                )
                schemas = [row[0] for row in result]
                print(f"üìä Sch√©mas disponibles ({len(schemas)}): {schemas}")
                print()

                # Tables et vues
                result = conn.execute(
                    text(
                        """
                    SELECT table_schema, table_name, table_type
                    FROM information_schema.tables 
                    WHERE table_schema NOT IN (
                        'information_schema', 'pg_catalog'
                    )
                    ORDER BY table_schema, table_name
                    LIMIT 50
                """
                    )
                )
                tables = list(result)
                print(f"üìã Tables/VIEWs trouv√©es ({len(tables)}):")

                view_count = 0
                table_count = 0

                for schema, name, type_ in tables:
                    if type_ == "VIEW":
                        icon = "üëÅÔ∏è"
                        view_count += 1
                    else:
                        icon = "üè†"
                        table_count += 1
                    print(f"   {icon} {schema}.{name} ({type_})")

                print()
                print(f"üìä R√©sum√©: {table_count} tables, {view_count} vues")

                # Test sp√©cifique des VIEWs avec pr√©fixe v_
                print()
                print("üîç Recherche VIEWs avec pr√©fixe 'v_'...")
                result = conn.execute(
                    text(
                        """
                    SELECT table_schema, table_name
                    FROM information_schema.views 
                    WHERE table_schema NOT IN (
                        'information_schema', 'pg_catalog'
                    )
                    AND table_name LIKE 'v_%'
                    ORDER BY table_schema, table_name
                """
                    )
                )
                v_views = list(result)

                if v_views:
                    print(
                        f"üéØ VIEWs avec pr√©fixe 'v_' trouv√©es ({len(v_views)}):"
                    )
                    for schema, name in v_views:
                        print(f"   üìä {schema}.{name}")
                else:
                    print("‚ö†Ô∏è Aucune VIEW avec pr√©fixe 'v_' d√©tect√©e")

                # Toutes les VIEWs disponibles
                print()
                print("üìã Toutes les VIEWs disponibles:")
                result = conn.execute(
                    text(
                        """
                    SELECT table_schema, table_name
                    FROM information_schema.views 
                    WHERE table_schema NOT IN (
                        'information_schema', 'pg_catalog'
                    )
                    ORDER BY table_schema, table_name
                """
                    )
                )
                all_views = list(result)

                for schema, name in all_views:
                    if name.startswith("v_"):
                        icon = "üéØ"  # VIEWs avec pr√©fixe v_
                    else:
                        icon = "üëÅÔ∏è"  # Autres VIEWs
                    print(f"   {icon} {schema}.{name}")

        else:
            print("‚ùå √âchec de la connexion PostgreSQL")
            return False

    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback

        traceback.print_exc()
        return False  # Test de la m√©thode get_available_views de l'application
        print()
        print("üéØ Test m√©thode get_available_views()...")
        views = db.get_available_views()
        print(f"‚úÖ VIEWs m√©tier d√©tect√©es: {len(views)}")

        for view in views:
            print(f"   üìä {view['name']} ({view['column_count']} colonnes)")
            print(f"      Desc: {view['description']}")
            print(f"      Colonnes: {view['columns']}")
            print()

        # Test de la m√©thode get_available_views de l'application
        print()
        print("üéØ Test m√©thode get_available_views()...")
        views = db.get_available_views()
        print(f"‚úÖ VIEWs m√©tier d√©tect√©es: {len(views)}")

        for view in views:
            print(f"   üìä {view['name']} ({view['column_count']} colonnes)")
            print(f"      Desc: {view['description']}")
            if view["columns"]:
                print(
                    f"      Premi√®res colonnes: {', '.join(view['columns'])}"
                )
            print()

        return True


if __name__ == "__main__":
    success = test_database_connection()
    sys.exit(0 if success else 1)
